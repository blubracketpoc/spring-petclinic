name: Java CI with Maven

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ['17']

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{matrix.java}}
      uses: actions/setup-java@v2
      with:
        java-version: ${{matrix.java}}
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven Wrapper
      run: ./mvnw -B package


name: Veracode Policy Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-policy-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2 # Make java accessible on path so the uploadandscan action can run.
        with: 
          distribution: 'adopt'
          java-version: '8'

      # zip the project and move it to a staging directory
      - name: Zip Project
        run: zip -R project.zip '*.py' '*.html' '*.htm' '*.js' '*.php' 'requirements.txt' '*.json' '*.lock' '*.ts' '*.pl' '*.pm' '*.plx' '*.pl5' '*.cgi' '*.go' '*.sum' '*.mod'
        env:
          build-name: project.zip
      - uses: actions/upload-artifact@v3 # Copy files from repository to docker container so the next uploadandscan action can access them.
        with:
          path: project.zip # Wildcards can be used to filter the files copied into the container. See: https://github.com/actions/upload-artifact
      - uses: veracode/veracode-uploadandscan-action@master # Run the uploadandscan action. Inputs are described above.
        with:
          appname: '${{ github.repository }}'
          version: '${{ github.run_id }}'
          filepath: 'project.zip'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          scantimeout: 15
